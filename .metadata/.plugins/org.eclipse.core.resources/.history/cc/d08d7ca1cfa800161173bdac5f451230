package com.ballikaya.todolist.repository;

import java.util.Optional;
import java.util.stream.Stream;

import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.Repository;

import com.ballikaya.todolist.model.User;

public interface UserRepository extends Repository<User, Long> {


	/**
	 * Special customization of {@link CrudRepository#findOne(java.io.Serializable)} to return a JDK 8 {@link Optional}.
	 * 
	 * @param id
	 * @return
	 */
	Optional<User> findOne(Long id);

	/**
	 * Saves the given {@link Customer}.
	 * 
	 * @param customer
	 * @return
	 */
	<S extends User> S save(S customer);

	/**
	 * Sample method to derive a query from using JDK 8's {@link Optional} as return type.
	 * 
	 * @param lastname
	 * @return
	 */
	Optional<User> findByMail(String mail);

	/**
	 * Sample default method to show JDK 8 feature support.
	 * 
	 * @param customer
	 * @return
	 */
	default Optional<User> findByLastname(User user) {
		return findByLastname(user == null ? null : user.lastname);
	}

	/**
	 * Sample method to demonstrate support for {@link Stream} as a return type with a custom query. The query is executed
	 * in a streaming fashion which means that the method returns as soon as the first results are ready.
	 * 
	 * @return
	 */
	@Query("select c from Customer c")
	Stream<User> streamAllCustomers();

	/**
	 * Sample method to demonstrate support for {@link Stream} as a return type with a derived query. The query is
	 * executed in a streaming fashion which means that the method returns as soon as the first results are ready.
	 * 
	 * @return
	 */
	Stream<User> findAllByLastnameIsNotNull();


	
}
