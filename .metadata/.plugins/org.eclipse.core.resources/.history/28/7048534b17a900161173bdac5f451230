package com.ballikaya.todolist.service.repository;

import java.util.Optional;
import java.util.stream.Stream;

import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.Repository;

import com.ballikaya.todolist.model.Task;
import com.ballikaya.todolist.model.User;

@org.springframework.stereotype.Repository
public interface TaskRepository extends Repository<Task, Long> {
 

	/**
	 * Special customization of {@link CrudRepository#findOne(java.io.Serializable)} to return a JDK 8 {@link Optional}.
	 * 
	 * @param id
	 * @return
	 */
	Optional<Task> findOne(Long id);

	/**
	 * Saves the given {@link Customer}.
	 * 
	 * @param customer
	 * @return
	 */
	<S extends Task> S save(S user);

	/**
	 * Sample method to derive a query from using JDK 8's {@link Optional} as return type.
	 * 
	 * @param lastname
	 * @return
	 */
	Optional<Task> findByName(String name);

	

	/**
	 * Sample method to demonstrate support for {@link Stream} as a return type with a custom query. The query is executed
	 * in a streaming fashion which means that the method returns as soon as the first results are ready.
	 * 
	 * @return
	 */
	@Query("select t from Task t.userId = ?")
	Stream<Task> streamTesksOfUSer(Long id);


	
}
